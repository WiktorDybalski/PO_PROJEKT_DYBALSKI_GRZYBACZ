@startuml

interface MapElement {
    + getPosition(): Vector2d
}

interface SimulationControl {
    + runSimulation(): void
    + updateDay(): void
}

interface Displayable {
    + displayMap(): void
    + updateStatistics(): void
}

interface MapElement {
    + getPosition(): Vector2d
}

interface WorldMap {
    + getMapTiles(): HashMap<Vector2d, Tile>
    + getAnimals(): List<Animal>
    + getPlants(): List<Plant>
    + getLowerLeft(): Vector2d
    + getUpperRight(): Vector2d
    + getWidth(): int
    + getHeight(): int
    + getElements(): List<MapElement>

    + canMoveTo(Vector2d): boolean
    + move(Animal): void
    + placeAnimal(Animal): boolean
    + objectsAt(Vector2d): MapObjects
    + isOccupied(Vector2d): boolean
    + placePlant(Plant): boolean

    + generateMap(): void
    + updateMap(): void
    + drawMap(): void
}

enum Direction {
    NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST
    + public getRandomDirection(): Direction
    + public getDirectionName(int): Direction
    + public getDirectionIndex(Direction): int
    + public toUnitVector(): Vector2d
}

class Vector2d {
    - private x: int
    - private y: int

    + public Vector2d(int, int)

    + public getX(): int
    + public getY(): int

    + public add(Vector2d): Vector2d
    + public subtract(Vector2d): Vector2d
    + public precedesY(Vector2d): boolean
    + public upperRight(Vector2d): Vector2d
    + public lowerLeft(Vector2d): Vector2d

    + public hashCode(): int
    + public equals(Object): boolean
    + public toString(): String
}

class MapObjects{
    - private plant: Plant
    - private animals: PriorityQueue<Animal>

    + public MapObjects()

    + public getPlant(): Plant
    + public getAnimals(): List<Animal>
    + public getObjects(): List<MapElement>
    + public getSortedAnimals(): ArrayList<Animal>
    + public getStrongestAnimal(): Animal
    + public getStrongestAnimals(): List<Animal>

    + public addPlant(Plant): void
    + public removePlant(): void
    + public addAnimal(Animal): void
    + public removeAnimal(Animal): void
    + public removeDeadAnimals(): void
    + public isOccupied(): boolean

    + public growPlant(): void
    + public growAnimals(): void

    + public toString(): String
}

class Genotype {
    - private genes: List<Integer>

    + public Genotype(List<Integer>)

    + public getGenes(): List<Integer>
    + public getGenomeLength(): int
    + public getGene(int): int

    + public mutate(): void
    + public mixGenotypes(): Genotype

    + public hashCode(): int
    + public equals(Object): boolean
    + public toString(): String
    + TODO: DOPISAC getRandomGenotype
}

' Klasa reprezentująca zwierzę'
class Animal implements MapElement {
    - private position: Vector2d
    - private energy: int
    - private direction: Direction
    - private genotype: Genotype
    - private children: List<Animal>
    - private eatenPlantCount: int
    - private birthDay: int
    - private age: int
    - private isDead: boolean
    - private actualActiveGenIndex: int
    - private minimalReproductionEnergy: int

    + public Animal(Vector2d, int, Genotype, int, int)

    + public getEnergy(): int
    + public getChildrenCount(): int
    + public getGenotype(): Genotype
    + public getPosition(): Vector2d
    + public getDirection(): Direction
    + public getEatenPlantCount(): int
    + public getBirthDay(): int
    + public getIsDead(): boolean
    + public getChildren(): List<Animal>
    + public getDescendantCount(): int
    + public getAge(): int
    + public getActualActiveGenIndex(): int
    + public getMinimalReproductionEnergy(): int
    + public getNextGene(): int

    + public setActiveGenIndex(int): void
    + public setEnergy(int): void

    + public canReproduce(): boolean
    + public move(Direction, Vector2d): void
    + public eat(Plant): void
    + public addChild(Animal): void
    + public reproduce(Animal, int, int): Animal
    + public die(): void
    + public grow(): void

    + public hashCode(): int
    + public equals(Object): boolean
    + public toString(): String
}

' Klasa reprezentująca roślinę
class Plant implements MapElement {
    - private position: Vector2d
    - private energy: int
    - private dayOfGrowth: int
    - private isPoisoned: boolean
    - private isEaten: boolean

    + public Plant(Vector2d,int,boolean, int)

    + public getEnergy(): int
    + public getDayOfGrowth(): int POTRZEBNE?
    + public getPosition(): Vector2d
    + public getIsPoisoned(): boolean
    + public getIsEaten(): boolean

    + public setIsEaten(): void
    + public grow(): void

    + public toString(): String
}

' Klasa reprezentująca pojedyncze pole na mapie'
class Tile {
    - private position: Vector2d
    - private objects: MapObjects

    + public Tile(Vector2d)

    + public getPosition(): Vector2d
    + public getAnimals(): List<Animal>
    + public getPlant(): Plant
    + public getObjects(): MapObject

    + public setPlant(Plant): void

    + public addAnimal(Animal): void
    + public removeAnimal(Animal): void
    + public isOccupied(): boolean  POTRZEBNE GO WGL?
    + public getStrongestAnimal():
    + public getStrongestAnimals(): List<Animal>  NIEMA SPECYFIKATORA DOSTEPU
    + public removeDeadAnimals(): void
    + public eatPlant(): void
    + public reproduceAnimals: void
    + public grow(): void
    + public removePlant(): void

    + public hashCode(): int
    + public equals(Tile): boolean
    + public toString(): String
}


' Klasa abstrakcyjna reprezentująca mapę świata gry
abstract class AbstractWorldMap implements WorldMap{
    - private lowerLeft: Vector2d
    - private upperRight: Vector2d
    - private animals: List<Animal>
    - private plants: List<Plant>
    - private mapTiles: HashMap<Vector2d, Tile>

    + public AbstractWorldMap(Vector2d, Vector2d)

    + public getMapTiles(): HashMap<Vector2d, Tile>
    + public getAnimals(): List<Animal>
    + public getPlants(): List<Plant>
    + public getLowerLeft(): Vector2d
    + public getUpperRight(): Vector2d
    + public getWidth(): int
    + public getHeight(): int
    + public getElements(): List<MapElement>

    + public canMoveTo(Vector2d): boolean
    + public move(Animal): void
    + public placeAnimal(Animal): boolean
    + public objectsAt(Vector2d): MapObjects
    + public isOccupied(Vector2d): boolean
    + public placePlant(Plant): boolean

    + public generateMap(): void
    + public updateMap(): void
    + public drawMap(): void
}


' Klasa reprezentująca mapę świata gry w ksztalcie walca
class GlobeMap extends AbstractWorldMap {
    + GlobeMap()
    + canMoveTo(Vector2d): boolean
    + move(): void
    + generateMap(): void
    + updateMap(): void
    + drawMap(): void
}

' Klasa reprezentująca mapę świata gry z zatrutymi owocami
class PoisonedMap extends AbstractWorldMap {
    - private poisonChance: float
    - private poisonedAreaLowerLeft: Vector2d
    - private poisonedAreaUpperRight: Vector2d

    'konstrukor przyjmuje rozmiar zatrutego fragmentu mapy'
    + PoisonedMap(int)

    + getPoisonChance(): float
    + getPoisonedAreaLowerLeft(): Vector2d
    + getPoisonedAreaUpperRight(): Vector2d

    + setPoisonChance(float): void

    + generatePoisonedAreaLowerLeft(): void
    + generatePoisonedAreaUpperRight(): void
    + canMoveTo(Vector2d): boolean
    + createPoisonedArea(): void
    + moveAnimal(): void
    + placePoisonedPlant(): boolean
    + move(Animal): void
    + generateMap(): void
    + updateMap(): void
    + drawMap(): void
}

class MapVisualiser {
    - private static final String EMPTY_CELL = "  "
    - private static final String FRAME_SEGMENT = "-"
    - private static final String CELL_SEGMENT = "|"
    - private map: AbstractWorldMap

    + public MapVisualiser(AbstractWorldMap)

    + public draw(Vector2d,Vector2d): String
    + private drawFrame(boolean): String
    + private drawHeader(Vector2d,Vector2d): String
    + private drawObject(Vector2d)): String
}

class RandomPositionsGenerator {
    - private final maxWidth: int
    - private final maxHeight: int
    - private final objectCount: int
    - private final allPositions: List<Vector2d>
    - private result: List<Vector2d>

    + public RandomPositionsGenerator(Vector2d, Vector2d)

    + public getResult(): List<Vector2d>
    + private generateObject(): List<Vector2d>
    + private generateAllPositions(): List<Vector2d>
}

' Klasa do przechowywania statystyk symulacji
class Statistics{
    - private animalCount: int
    - private plantCount: int
    - private freeTilesCount: int
    - private averageLifespan: float
    - private averageEnergyLevel: float
    - private averageChildrenCount: float
    - private mostPopularGenotype: Genotype

    + Statistics()
    + getAnimalCount(): int
    + getPlantCount(): int
    + getAverageLifespan(): float
    + getAverageChildrenCount(): float
    + getAverageEnergyLevel(): float
    + getMostPopularGenotype(): Genotype
    + getFreeTilesCount(): int

    + updateStatistics(List<Animal>, List<Plant>): void
    + calculateAvrageLifespan(List<Animal>): float
    + calculateAvrageChildrenCount(List<Animal>): float
    + calculateAvrageEnergyLevel(List<Animal>): float
    + calculateMostPopularGenotype(List<Animal>): Genotype
    + calculateFreeTilesCount(): int
    + calculateAnimalCount(List<Animal>): int
    + calculatePlantCount(List<Plant>): int

    + updateStatistics(List<Animal>, List<Plant>): void
}


' Klasa symulatora zarządzająca symulacją
class Simulator implements SimulationControl {
    - private worldMap: WorldMap
    - private statistics: Statistics

    + Simulator(WorldMap)

    + getStatistics(): Statistics

    + runSimulation(): void
    + updateDay(): void
    + displayMap(): void
    + updateStatistics(): void
}

' Klasa do konfiguracji symulacji
class SimulationConfigurator {
    - private mapSizeX: int
    - private mapSizeY: int
    - private mapType: String
    - private initialPlantCount: int
    - private plantEnergy: int
    - private numberOfPlantsGrowingPerDay: int
    - private modeOfPlantGrowing: String
    - private initialAnimalCount: int
    - private initialAnimalEnergy: int
    - private readyToReproduceEnergy: int
    - private reproduceEnergyLoss: int
    - private minimumMutationCount: int
    - private maximumMutationCount: int
    - private mutationVariant: String
    - private genomeLength: int
    - private animalBehaviourType: String

    + SimulationConfigurator()

    + getMapSize(): Vector2d
    + getMapType(): String
    + getInitialPlantCount(): int
    + getPlantEnergy(): int
    + getNumberOfPlantsGrowingPerDay(): int
    + getModeOfPlantGrowing(): String
    + getInitialAnimalCount(): int
    + getInitialAnimalEnergy(): int
    + getReadyToReproduceEnergy(): int
    + getReproduceEnergyLoss(): int
    + getMinimumMutationCount(): int
    + getMaximumMutationCount(): int
    + getMutationVariant(): String
    + getGenomeLength(): int
    + getAnimalBehaviourType(): String

    + setMapSize(int,int): void
    + setMapType(String): void
    + setInitialPlantCount(int): void
    + setPlantEnergy(int): void
    + setNumberOfPlantsGrowingPerDay(int): void
    + setModeOfPlantGrowing(String): void
    + setInitialAnimalCount(int): void
    + setInitialAnimalEnergy(int): void
    + setReadyToReproduceEnergy(int): void
    + setReproduceEnergyLoss(int): void
    + setMinimumMutationCount(int): void
    + setMaximumMutationCount(int): void
    + setMutationVariant(String): void
    + setGenomeLength(int): void
    + setAnimalBehaviourType(String): void

    + toString(): String
}

' Kontroler UI TUTAJ NIE UMIEM NIC
class UIController implements Displayable {
    - simulator: Simulator

    + UIController(Simulator)
    + displayMap(): void
    + updateStatistics(): void
    + getSimulator(): Simulator
    + setSimulator(Simulator): void
}

AbstractWorldMap *-- "many" Tile : contains >
Tile o-- MapObjects : contains >
GlobeMap -up-|> AbstractWorldMap
PoisonedMap -up-|> AbstractWorldMap
Tile o-- "many" Animal : contains >
Tile o-- Plant : contains >
Animal --> Genotype : has >
Simulator --> WorldMap : controls >
UIController --> Simulator : uses >
Statistics --> "many" Animal : tracks >
Statistics --> "many" Plant : tracks >
SimulationConfigurator --> Simulator : configures >
Animal --> Direction : moves in >

Animal -up-|> Movable
Animal -up-|> Eatable
Animal -up-|> Reproducible
Plant -up-|> Growable
Simulator -up-|> SimulationControl
UIController -up-|> Displayable
Statistics -up-|> StatisticUpdate
Genotype -up-|> GeneticMutation
AbstractWorldMap -up-|> WorldMap
AbstractWorldMap -up-|> MapVisualizer
MapObjects -up-|> MapElement
@enduml