@startuml

package model.utils {
    package model.utils.RandomGenerators {
        class RandomAnimalsGenerator {
            - private animals: List<Animal>
            - private random: Random
            - private final animalEnergy: int
            - private static final BIRTHDAY: int
            - private final minimalReproductionEnergy: int
            - private final map: WorldMap

            + public RandomAnimalsGenerator(initialAnimalEnergy: int, minimalReproductionEnergy: int, map: WorldMap)
            + public getAnimals(): List<Animal>
            - private generateRandomAnimal(position: Vector2d, genotype: Genotype): Animal
            + private generateAnimals(amount: int): void
        }

        class RandomGensGenerator {
            - private static final GEN_LENGTH: int
            - private gens: List<Genotype>
            - private random: Random

            + public RandomGensGenerator(initialNumberOfGens: int)
            + public getGens(): List<Genotype>
            + public addGens(numberOfGens: int): void
            + private generateGens(numberOfGens: int): void
            + private generateRandomGen(): Genotype
        }

        class RandomPositionsGenerator {
           - private maxWidth: int
           - private maxHeight: int
           - private objectCount: int
           - private allPositions: List<Vector2d>
           - private animalResult: List<Vector2d>
           - private plantResult: List<Vector2d>
           - private plantInPoisonedResult: List<Vector2d>

           + public RandomPositionsGenerator(map: WorldMap, objectCount: int)
           + public getAnimalResult(): List<Vector2d>
           + public getPlantResult(): List<Vector2d>
           - private generateAllPositions(): List<Vector2d>
           'TODO: maybe private?'
           + public generateAnimals(): List<Vector2d>
           'TODO: maybe private?'
           + public generatePlants(freePositions: List<Vector2d>): List<Vector2d>
        }

        class RandomPlantsGenerator {
            - private plantEnergy: int
            'TODO: maybe unnecessary?'
            - private static final DAY_OF_GROWTH: int
            - private plants: List<Plant>
            - private random: Random
            - private final map: WorldMap

            + public RandomPlantsGenerator(plantEnergy: int, map: WorldMap)
            + public getPlants(): List<Plant>
            - private generateRandomPlant(position: Vector2d): Plant
            'TODO: maybe private?'
            + public generatePlants(amount: int, freePositions: List<Vector2d>): void
        }
    }
    interface MapElement {
        + public getPosition(): Vector2d
    }

    enum Direction {
        NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST
        + public static getRandomDirection(): Direction
        + public static getDirectionName(int): Direction
        + public static getDirectionIndex(Direction): int
        + public static toUnitVector(): Vector2d
        + public static fromUnitVector(Vector2d): Direction
    }

    class Vector2d {
        - private final x: int
        - private final y: int

        + public Vector2d(int, int)

        + public getX(): int
        + public getY(): int

        + public add(Vector2d): Vector2d
        + public subtract(Vector2d): Vector2d
        + public upperRight(Vector2d): Vector2d
        + public lowerLeft(Vector2d): Vector2d
        + public precedes(Vector2d): boolean
        + public follows(Vector2d): boolean

        + public hashCode(): int
        + public equals(Object): boolean
        + public toString(): String
    }

    class MapObjects {
        - private plant: Plant
        - private animals: ArrayList<Animal>

        + public MapObjects()

        + public getPlant(): Plant
        + public getAnimals(): List<Animal>
        + public getObjects(): List<MapElement>
        + public getSortedAnimals(): ArrayList<Animal>
        + public getStrongestAnimal(): Animal
        + public getStrongestAnimals(): ArrayList<Animal>

        + public addPlant(plant: Plant): void
        + public removePlant(): void
        + public addAnimal(animal: Animal): void
        + public removeAnimal(animal: Animal): void
        + public removeDeadAnimalsFromMapObjects(): void
        + public isOccupied(): boolean
        + public growPlant(): void
        + public growAnimals(): void

        + public toString(): String
      }

      class Genotype {
        - private genes: ArrayList<Integer>

        + public Genotype(genes: ArrayList<Integer>)

        + public getGenes(): List<Integer>
        + public getGenomeLength(): int
        + public getGene(index: int): int
        'TODO: maybe private?'
        + public mutate(): void
        + public mixGenotypes(genotype: Genotype, ratio: double): Genotype

        + public hashCode(): int
        + public equals(obj: Object): boolean
        + public toString(): String
      }

      class Animal implements MapElement {
        - private position: Vector2d
        - private energy: int
        - private direction: Directions
        - private genotype: Genotype
        - private children: ArrayList<Animal>
        - private eatenPlantCount: int
        - private birthDay: int
        - private age: int
        - private isDead: boolean
        - private actualActiveGenIndex: int
        - private minimalReproductionEnergy: int

        + public Animal(position: Vector2d, energy: int, genotype: Genotype, birthDay: int, minimalReproductionEnergy: int)

        + public getEnergy(): int
        + public getChildrenCount(): int
        + public getGenotype(): Genotype
        + public getPosition(): Vector2d
        + public getDirection(): Directions
        + public getEatenPlantCount(): int
        + public getBirthDay(): int
        + public getIsDead(): boolean
        + public getChildren(): ArrayList<Animal>
        + public getDescendantCount(): int
        + public getAge(): int
        + public getActualActiveGenIndex(): int
        + public getMinimalReproductionEnergy(): int
        + public getNextGene(): int
        + public setActualActiveGenIndex(actualActiveGenIndex: int): void
        + public setDirection(direction: Directions): void

        + public decreaseEnergy(): void
        + public move(newDirection: Directions, newPosition: Vector2d): void
        + public eat(plant: Plant): void
        + public addChild(child: Animal): void
        + public reproduce(partner: Animal, currentDay: int, energyToTransfer: int): Animal
        + public die(): void
        + public grow(): void
        + public hashCode(): int
        + public equals(other: Object): boolean
        + public toString(): String
      }

    class Plant implements MapElement {
        - private position: Vector2d
        - private energy: int
        - private dayOfGrowth: int
        - private isPoisoned: boolean
        - private isEaten: boolean

        + public Plant(position: Vector2d, energy: int, isPoisoned: boolean, dayOfGrowth: int)

        + public getEnergy(): int
        + public getDayOfGrowth(): int
        + public getPosition(): Vector2d
        + public getIsPoisoned(): boolean
        + public getIsEaten(): boolean
        + public setIsEaten(): void
        + public setPoison(): void
        + public setEnergy(newEnergy: int): void
        + public grow(): void
        + public hashCode(): int
        + public equals(other: Object): boolean
        + public toString(): String
    }

    class Statistics {
        - private map: WorldMap
        - private numberOfAnimals: int
        - private numberOfPlants: int
        - private averageLifeSpan: double
        - private averageNumberOfChildren: double
        - private averageEnergyLevel: double
        - private dominantGenotype: Genotype
        - private freeTilesCount: int
        - private numberOfAliveAnimals: int
        - private numberOfDeadAnimals: int

        + public Statistics(map: WorldMap)

        + public getNumberOfAnimals(): int
        + public getNumberOfPlants(): int
        + public getAverageLifeSpan(): double
        + public getAverageNumberOfChildren(): double
        + public getAverageEnergyLevel(): double
        + public getDominantGenotype(): Genotype
        + public getFreeTilesCount(): int
        + public getNumberOfAliveAnimals(): int
        + public getNumberOfDeadAnimals(): int
        + public getStatistics(): String
        + public updateStatistics(): void
        + public toString(): String
        + public toCSV(filePath: String): void
    }

    class Tile {
        - private position: Vector2d
        - private objects: MapObjects

        + public Tile(position: Vector2d)

        + public getPosition(): Vector2d
        + public getAnimals(): List<Animal>
        + public getPlant(): Plant
        + public getObjects(): MapObjects
        + public setPlant(plant: Plant): void
        + public addAnimal(animal: Animal): void
        + public removeAnimal(animal: Animal): void
        + public isOccupied(): boolean
        + public getStrongestAnimal(): Animal
        + public getStrongestAnimals(): ArrayList<Animal>
        + public removeDeadAnimalsFromTile(): void
        + public eatPlant(): void
        + public reproduceAnimals(currentDay: int, energyToTransfer: int): void
        + public grow(): void
        + public removePlant(): void

        + public hashCode(): int
        + public equals(other: Object): boolean
        + public toString(): String
    }

    class Statistics {
        - private map: WorldMap

        + Statistics()
        + getAnimalCount(): int
        + getPlantCount(): int
        + getAverageLifespan(): float
        + getAverageChildrenCount(): float
        + getAverageEnergyLevel(): float
        + getMostPopularGenotype(): Genotype
        + getFreeTilesCount(): int
    }
}


package model.maps {
    interface WorldMap {
       + public getMapTiles(): HashMap<Vector2d, Tile>
       + public getCurrentDay(): int
       + public getAnimals(): List<Animal>
       + public getPlants(): List<Plant>
       + public getLowerLeft(): Vector2d
       + public getUpperRight(): Vector2d
       + public getWidth(): int
       + public getHeight(): int
       + public getElements(): List<MapElement>
       + public canMoveTo(Vector2d): boolean
       + public move(List<Animal>): void
       + public placeAnimal(Animal, Vector2d): boolean
       + public objectsAt(Vector2d): MapObjects
       + public isOccupied(Vector2d): boolean
       + public placePlant(Plant, Vector2d): boolean
       'TODO: why default?'
       + public default generateMap(List<Plant>, List<Animal>): void
       + public toString(): String
       + public getTile(Vector2d): Tile
       + public firstDay(): void
       + public dailyUpdate(): void
    }

    abstract class AbstractWorldMap implements WorldMap{
        - protected SimulationConfigurator: config
        - private currentDay: int
        - private lowerLeft: Vector2d
        - private upperRight: Vector2d
        - private animals: List<Animal>
        - private plants: List<Plant>
        - private mapTiles: HashMap<Vector2d, Tile>
        - protected freePositions: List<Vector2d>
        - protected mapVisualizer: MapVisualizer

        + AbstractWorldMap(Vector2d, Vector2d)

        + public getConfig(): SimulationConfigurator
        + public getCurrentDay(): int
        + public getMapTiles(): HashMap<Vector2d, Tile>
        + public getAnimals(): List<Animal>
        + public getPlants(): List<Plant>
        + public getLowerLeft(): Vector2d
        + public getUpperRight(): Vector2d
        + public getWidth(): int
        + public getHeight(): int
        + public getElements(): List<MapElement>
        + public getTile(Vector2d): Tile

        + public canMoveTo(Vector2d): boolean
        + public newPositionOutOfLeftBound(Vector2d): Vector2d
        + public newPositionOutOfRightBound(Vector2d): Vector2d
        + public objectsAt(Vector2d): MapObjects
        + public isOccupied(Vector2d): boolean
        + public placeAnimal(Animal): void
        + public placeAnimals(int): void
        + public placePlant(Plant): voif
        + public placePlants(int): void
        'TODO: maybe private?'
        + public eat(): void
        'TODO: maybe private?'
        + public removeDeadAnimals(): void
        'TODO: maybe private?'
        + public move(Animal): void
        'TODO: maybe private?'
        + public removeEatenPlants(): void
        'TODO: maybe private?'
        + public reproduce(): void
        'TODO: maybe private?'
        + public generateMap(): void
        + public firstDay(): void
        + public dailyUpdate(): void
        + public toString(): String
    }

    class GlobeMap extends AbstractWorldMap {
        + public GlobeMap()
        + public move(): void
    }

    class PoisonedMap extends AbstractWorldMap {
        - private poisonedAreaLowerLeft: Vector2d
        - private poisonedAreaUpperRight: Vector2d

        + public PoisonedMap(config:SimulationConfigurator)

        + private generateLeftDownCornerPoisonedSquare(): Vector2d
        + private generateRightUpCornerPoisonedSquare(): Vector2d
        + private isPoisonous(): boolean
        + public placePlant(Plant,Vector2d): void
        + public move(List<Animal>): void
        'TODO: maybe private?'
        + public generateMap(): void
    }
}

package model.simulation {
    class Simulation extends Thread {
        - private final worldMap: WorldMap
        - private final config: SimulationConfigurator
        - private statistics: Statistics

        + Simulator(WorldMap, SimulationConfigurator)
        + public run(): void
    }

    class SimulationEngine {
        - private simulations: List<Simulation>
        - private final threads: List<Thread>
        + public SimulationEngine(simulations: List<Simulation>)
        + public runSync(): void
        + public runAsync(): void
        + awaitSimulationsEnd(): void
        + public unAsyncInThreadPool(): void
        + public run(): void
      }

    class SimulationApp {
        + public start: void
    }

    class SimulationConfigurator {
        - private mapSizeX: int
        - private mapSizeY: int
        - private mapType: String
        - private initialPlantCount: int
        - private plantEnergy: int
        - private numberOfPlantsGrowingPerDay: int
        - private modeOfPlantGrowing: String
        - private initialAnimalCount: int
        - private initialAnimalEnergy: int
        - private readyToReproduceEnergy: int
        - private reproduceEnergyLoss: int
        - private minimumMutationCount: int
        - private maximumMutationCount: int
        - private mutationVariant: String
        - private genomeLength: int
        - private animalBehaviourType: String
        - private finalnumberOfDays: int

        + public SimulationConfigurator()
        + public getMapSize(): Vector2d
        + public getMapType(): String
        + public getInitialPlantCount(): int
        + public getPlantEnergy(): int
        + public getNumberOfPlantsGrowingPerDay(): int
        + public getModeOfPlantGrowing(): String
        + public getInitialAnimalCount(): int
        + public getInitialAnimalEnergy(): int
        + public getReadyToReproduceEnergy(): int
        + public getReproduceEnergyLoss(): int
        + public getMinimumMutationCount(): int
        + public getMaximumMutationCount(): int
        + public getMutationVariant(): String
        + public getGenomeLength(): int
        + public getAnimalBehaviourType(): String
        + public getNumberOfDays(): int
        + public setMapSize(x: int, y: int): void
        + public setMapType(mapType: String): void
        + public setInitialPlantCount(initialPlantCount: int): void
        + public setPlantEnergy(plantEnergy: int): void
        + public setNumberOfPlantsGrowingPerDay(numberOfPlantsGrowingPerDay: int): void
        + public setModeOfPlantGrowing(modeOfPlantGrowing: String): void
        + public setInitialAnimalCount(initialAnimalCount: int): void
        + public setInitialAnimalEnergy(initialAnimalEnergy: int): void
        + public setReadyToReproduceEnergy(readyToReproduceEnergy: int): void
        + public setReproduceEnergyLoss(reproduceEnergyLoss: int): void
        + public setMinimumMutationCount(minimumMutationCount: int): void
        + public setMaximumMutationCount(maximumMutationCount: int): void
        + public setMutationVariant(mutationVariant: String): void
        + public setGenomeLength(genomeLength: int): void
        + public setAnimalBehaviourType(animalBehaviourType: String): void
        + public toString(): String
    }
}

class WorldGUI {
    - private final Simulation: simulation
    - private final SimulationConfigurator: config

    + public WorldGUI(SimulationConfigurator)
    + public void runSimulation(): void
    + public static void main: void
}

package model.presenters {
    class MapVisualizer {
       - private static final EMPTY_CELL: String
       - private static final FRAME_SEGMENT: String
       - private static final CELL_SEGMENT: String
       - private final map: WorldMap

       + public MapVisualizer(map: WorldMap)
       + public draw(lowerLeft: Vector2d, upperRight: Vector2d): String
       - private drawFrame(innerSegment: boolean): String
       - private drawHeader(lowerLeft: Vector2d, upperRight: Vector2d): String
       - private drawObject(currentPosition: Vector2d): String
    }

'TODO: relations between classes'
Genotype <- RandomGensGenerator
RandomPositionsGenerator <- RandomPlantsGenerator
RandomPositionsGenerator <- RandomAnimalsGenerator
Animal <- Genotype
Animal <- Vector2d
Plant <-  Vector2d
Tile <-  MapObjects
Vector2d -> Tile
Statistics <- WorldMap
AbstractWorldMap <- SimulationConfigurator
AbstractWorldMap -> WorldMap
AbstractWorldMap <- MapVisualizer
GlobeMap -> AbstractWorldMap
PoisonedMap -> AbstractWorldMap
Simulation <- WorldMap
Simulation <- SimulationConfigurator
Simulation <- Statistics
SimulationEngine <- Simulation
SimulationApp <- SimulationEngine
WorldGUI <-> SimulationConfigurator
@enduml