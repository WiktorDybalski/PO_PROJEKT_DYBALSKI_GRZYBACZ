@startuml

package model.utils {
    package model.utils.RandomGenerators {
        class RandomAnimalsGenerator {
            - animalEnergy: int
            - minimalReproductionEnergy: int
            - map: WorldMap
            - animals: List<Animal>
            + RandomAnimalsGenerator(initialAnimalEnergy: int, minimalReproductionEnergy: int, map: WorldMap)
            + getAnimals(): List<Animal>
            - generateRandomAnimal(position: Vector2d, genotype: Genotype): Animal
            + generateAnimals(amount: int): void
        }

        class RandomGensGenerator {
            - genomeLength: int
            - gens: List<Genotype>
            - random: Random
            + RandomGensGenerator(initialNumberOfGens: int, genomeLength: int)
            + getGens(): List<Genotype>
            - generateGens(numberOfGens: int): void
            - generateRandomGen(): Genotype
        }

        class RandomPositionsGenerator {
            - maxWidth: int
            - maxHeight: int
            - objectCount: int
            - allPositions: List<Vector2d>
            - random: Random
            - animalResult: List<Vector2d>
            - plantResult: List<Vector2d>
            + RandomPositionsGenerator(map: WorldMap, objectCount: int)
            + generateAnimals(): List<Vector2d>
            + generatePlants(freePositions: List<Vector2d>): List<Vector2d>
            - generateAllPositions(): List<Vector2d>
        }

        class RandomPlantsGenerator {
            - map: WorldMap
            - plantEnergy: int
            - plants: List<Plant>
            + RandomPlantsGenerator(plantEnergy: int, map: WorldMap)
            + getPlants(): List<Plant>
            - generateRandomPlant(position: Vector2d): Plant
            + generatePlants(amount: int, freePositions: List<Vector2d>): void
        }
    }

    interface MapElement {
        + public getPosition(): Vector2d
    }

    class Boundary {
        - leftDownCorner: Vector2d
        - rightUpperCorner: Vector2d

        + Boundary(leftDownCorner: Vector2d, rightUpperCorner: Vector2d)
    }

    enum Directions {
        NORTH,
        NORTH_EAST,
        EAST,
        SOUTH_EAST,
        SOUTH,
        SOUTH_WEST,
        WEST,
        NORTH_WEST;

        + getRandomDirection(): Directions
        + getDirectionName(index: int): Directions
        + getDirectionIndex(direction: Directions): int
        + toUnitVector(index: int): Vector2d
        + fromUnitVector(vector: Vector2d): Directions
    }

    class Vector2d {
        - x: int
        - y: int
        + Vector2d(x: int, y: int)
        + getX(): int
        + getY(): int
        + add(other: Vector2d): Vector2d
        + subtract(other: Vector2d): Vector2d
        + upperRight(other: Vector2d): Vector2d
        + lowerLeft(other: Vector2d): Vector2d
        + precedes(position: Vector2d): boolean
        + follows(position: Vector2d): boolean
        + hashCode(): int
        + equals(other: Object): boolean
        + toString(): String
    }

    class MapObjects {
        - plant: Plant
        - animals: ArrayList<Animal>
        + MapObjects()
        + getPlant(): Plant
        + getAnimals(): List<Animal>
        + getObjects(): List<MapElement>
        + getSortedAnimals(): ArrayList<Animal>
        + getStrongestAnimal(): Animal
        + getStrongestAnimals(): ArrayList<Animal>
        + addPlant(plant: Plant): void
        + removePlant(): void
        + addAnimal(animal: Animal): void
        + removeAnimal(animal: Animal): void
        + removeDeadAnimalsFromMapObjects(): void
        + isOccupied(): boolean
        + growPlant(): void
        + growAnimals(): void
        + toString(): String
    }

    class Genotype {
        - genomeLength: int
        - genes: ArrayList<Integer>
        + Genotype(genes: ArrayList<Integer>, genomeLength: int)
        + getGenes(): List<Integer>
        + getGenomeLength(): int
        + getGene(index: int): int
        + mutate(mutationType: String): void
        - littleMutate(): void
        - fullyRandomMutate(): void
        + mixGenotypes(genotype: Genotype, ratio: double): Genotype
        + equals(obj: Object): boolean
        + hashCode(): int
        + toString(): String
    }

    class Animal {
        - genotype: Genotype
        - birthDay: int
        - minimalReproductionEnergy: int
        - position: Vector2d
        - energy: int
        - direction: Directions
        - children: ArrayList<Animal>
        - eatenPlantCount: int
        - age: int
        - isDead: boolean
        - actualActiveGenIndex: int

        + Animal(position: Vector2d, energy: int, genotype: Genotype, birthDay: int, minimalReproductionEnergy: int)
        + getInfoForNone(): String
        + getEnergy(): int
        + getChildrenCount(): int
        + getGenotype(): Genotype
        + getPosition(): Vector2d
        + getDirection(): Directions
        + setDirection(direction: Directions): void
        + getEatenPlantCount(): int
        + getBirthDay(): int
        + getIsDead(): boolean
        + getChildren(): ArrayList<Animal>
        + getDescendantCount(): int
        + getAge(): int
        + getActualActiveGenIndex(): int
        + setActualActiveGenIndex(actualActiveGenIndex: int): void
        + decreaseEnergy(): void
        + canReproduce(): boolean
        + move(newDirection: Directions, newPosition: Vector2d): void
        + eat(plant: Plant): void
        + addChild(child: Animal): void
        + reproduce(partner: Animal, currentDay: int, energyToTransfer: int, mutation_type: String): Animal
        + die(): void
        + grow(): void
        + equals(other: Object): boolean
        + hashCode(): int
        + toString(): String
        + getInfo(): String
    }

    class Plant {
        - position: Vector2d
        - dayOfGrowth: int
        - energy: int
        - isPoisoned: boolean
        - isEaten: boolean
        + Plant(position: Vector2d, energy: int, isPoisoned: boolean, dayOfGrowth: int)
        + getEnergy(): int
        + setEnergy(newEnergy: int): void
        + getDayOfGrowth(): int
        + getPosition(): Vector2d
        + getIsPoisoned(): boolean
        + getIsEaten(): boolean
        + setIsEaten(): void
        + setPoison(): void
        + grow(): void
        + hashCode(): int
        + equals(other: Object): boolean
        + toString(): String
    }

    class Statistics {
        - map: WorldMap
        - numberOfAnimals: int
        - numberOfPlants: int
        - averageLifeSpan: double
        - averageNumberOfChildren: double
        - averageEnergyLevel: double
        - dominantGenotype: Genotype
        - freeTilesCount: int
        - numberOfAliveAnimals: int
        - numberOfDeadAnimals: int
        - dominantGenotypeAnimals: Set<Vector2d>

        + Statistics(map: WorldMap)
        + getNumberOfAnimals(): int
        + getNumberOfPlants(): int
        + getAverageLifeSpan(): double
        + getAverageNumberOfChildren(): double
        + getAverageEnergyLevel(): double
        + getDominantGenotype(): Genotype
        + getFreeTilesCount(): int
        + getNumberOfAliveAnimals(): int
        + getNumberOfDeadAnimals(): int
        + getMap(): WorldMap
        + getStatistics(): String
        + updateStatistics(): void
        + toString(): String
    }

    class Tile {
        - position: Vector2d
        - objects: MapObjects
        + Tile(position: Vector2d)
        + getPosition(): Vector2d
        + getAnimals(): List<Animal>
        + getPlant(): Plant
        + getObjects(): MapObjects
        + setPlant(plant: Plant): void
        + addAnimal(animal: Animal): void
        + removeAnimal(animal: Animal): void
        + isOccupied(): boolean
        + getStrongestAnimal(): Animal
        + getStrongestAnimals(): ArrayList<Animal>
        + removeDeadAnimalsFromTile(): void
        + eatPlant(): void
        + reproduceAnimals(currentDay: int, energyToTransfer: int, mutationType: String): void
        + grow(): void
        + removePlant(): void
        + hashCode(): int
        + equals(other: Object): boolean
        + toString(): String
    }

    class SimulationCSV {
        - currentFilePath: Path
        - statistics: Statistics
        + SimulationCSV(s: Statistics)
        + toCSV(baseFileName: String, directoryPath: String): void
        - createUniqueFilePath(originalPath: Path): Path
    }
}


package model.maps {
    interface WorldMap {
        + getMapTiles(): HashMap<Vector2d, Tile>
        + getCurrentDay(): int
        + getAnimals(): List<Animal>
        + getPlants(): List<Plant>
        + getWidth(): int
        + getHeight(): int
        + canMoveTo(position: Vector2d): boolean
        + move(): void
        + placeAnimal(animal: Animal, position: Vector2d): void
        + objectsAt(position: Vector2d): MapObjects
        + isOccupied(position: Vector2d): boolean
        + placePlant(plant: Plant, position: Vector2d): void
        + generateMap(): void
        + toString(): String
        + getTile(currentPosition: Vector2d): Tile
        + firstDay(): void
        + dailyUpdate(): void
        + getCurrentBounds(): Boundary
        + getConfig(): SimulationConfigurator
        + addObserver(observer: MapChangeListener): void
    }

    abstract class AbstractWorldMap {
        - lowerLeft: Vector2d
        - upperRight: Vector2d
        - config: SimulationConfigurator
        - animals: List<Animal>
        - plants: List<Plant>
        - mapTiles: HashMap<Vector2d, Tile>
        - freePositions: List<Vector2d>
        - mapVisualizer: MapVisualizer
        - listeners: List<MapChangeListener>
        - currentDay: int

        + AbstractWorldMap(config: SimulationConfigurator)
        + getCurrentBounds(): Boundary
        + getConfig(): SimulationConfigurator
        + getCurrentDay(): int
        + getMapTiles(): HashMap<Vector2d, Tile>
        + getAnimals(): List<Animal>
        + getPlants(): List<Plant>
        + getLowerLeft(): Vector2d
        + getUpperRight(): Vector2d
        + getWidth(): int
        + getHeight(): int
        + getElements(): List<MapElement>
        + getTile(position: Vector2d): Tile
        + addObserver(observer: MapChangeListener): void
        + canMoveTo(position: Vector2d): boolean
        + newPositionOutOfLeftBound(position: Vector2d): boolean
        + newPositionOutOfRightBound(position: Vector2d): boolean
        + objectsAt(position: Vector2d): MapObjects
        + isOccupied(position: Vector2d): boolean
        + placeAnimal(animal: Animal, position: Vector2d): void
        + placeAnimals(amountOfAnimals: int): void
        + placePlant(plant: Plant, position: Vector2d): void
        + placePlants(amountOfPlants: int): void
        + eat(): void
        + removeDeadAnimals(): void
        + growAnimals(): void
        + move(): void
        + removeEatenPlants(): void
        + removeDeadAnimals(): void
        + generateMap(): void
        + firstDay(): void
        + dailyUpdate(): void
        + mapChanged(message: String): void
        + toString(): String
    }

    class GlobeMap extends AbstractWorldMap {
        + public GlobeMap(config: SimulationConfigurator)
    }

    class PoisonedMap {
        - leftDownPoisonedCorner: Vector2d
        - rightUpperPoisonedCorner: Vector2d
        - random: Random

        + PoisonedMap(config: SimulationConfigurator)
        - generateLeftDownCornerPoisonedSquare(): Vector2d
        - isPoisonous(): boolean
        + placePlant(plant: Plant, position: Vector2d): void
        + generateMap(): void
    }
}

package model.simulation {

    interface MapChangeListener {
        + mapChanged(worldMap: WorldMap, message: String): void
    }

    class Simulation extends Thread {
        - worldMap: WorldMap
        - config: SimulationConfigurator
        - lock: Object
        - statistics: Statistics
        - running: boolean
        + Simulation(worldMap: WorldMap, config: SimulationConfigurator)
        + isRunning(): boolean
        + getWorldMap(): WorldMap
        + setStatistics(statistics: Statistics): void
        + run(): void
        + pauseSimulation(): void
        + resumeSimulation(): void
        + stopSimulation(): void
        + getDominantGenotypeAnimals(): Set<Vector2d>
        + getPlantPreferredFields(): Set<Vector2d>
    }

    class SimulationEngine implements Runnable{
        - simulations: List<Simulation>
        - threads: List<Thread>
        + SimulationEngine(simulations: List<Simulation>)
        + runSync(): void
        + runAsync(): void
        + awaitSimulationsEnd(): void
        + runAsyncInThreadPool(): void
        + isRunning(): boolean
        + pauseSimulation(): void
        + resumeSimulation(): void
        + run(): void
    }


    class SimulationApp extends Application {
        + start(primaryStage: Stage): void
        - configureStage(primaryStage: Stage, viewRoot: BorderPane): void
    }

    class SimulationConfigurator {
        - writeToCsv: String
        - numberOfDays: int
        - mapSizeX: int
        - mapSizeY: int
        - mapType: String
        - initialPlantCount: int
        - plantEnergy: int
        - numberOfPlantsGrowingPerDay: int
        - modeOfPlantGrowing: String
        - initialAnimalCount: int
        - initialAnimalEnergy: int
        - readyToReproduceEnergy: int
        - reproduceEnergyLoss: int
        - minimumMutationCount: int
        - maximumMutationCount: int
        - mutationVariant: String
        - genomeLength: int
        - animalBehaviourType: String
        - dayLength: int
        + SimulationConfigurator()
        + getMapSizeX(): int
        + getMapSizeY(): int
        + getMapSize(): Vector2d
        + getMapType(): String
        + setMapType(mapType: String): void
        + getInitialPlantCount(): int
        + setInitialPlantCount(initialPlantCount: int): void
        + getPlantEnergy(): int
        + getNumberOfPlantsGrowingPerDay(): int
        + setNumberOfPlantsGrowingPerDay(numberOfPlantsGrowingPerDay: int): void
        + getModeOfPlantGrowing(): String
        + getInitialAnimalCount(): int
        + setInitialAnimalCount(initialAnimalCount: int): void
        + getInitialAnimalEnergy(): int
        + setInitialAnimalEnergy(initialAnimalEnergy: int): void
        + getReadyToReproduceEnergy(): int
        + setReadyToReproduceEnergy(readyToReproduceEnergy: int): void
        + getReproduceEnergyLoss(): int
        + setReproduceEnergyLoss(reproduceEnergyLoss: int): void
        + getMinimumMutationCount(): int
        + setMinimumMutationCount(minimumMutationCount: int): void
        + getMaximumMutationCount(): int
        + setMaximumMutationCount(maximumMutationCount: int): void
        + setMapSize(x: int, y: int): void
        + isWriteToCsv(): String
        + setWriteToCsv(writeToCsv: String): void
        + getMutationVariant(): String
        + setMutationVariant(mutationVariant: String): void
        + getGenomeLength(): int
        + setGenomeLength(genomeLength: int): void
        + getNumberOfDays(): int
        + setNumberOfDays(numberOfDays: int): void
        + getDayLength(): int
        + setDayLength(dayLength: int): void
        + fromText(lines: String[]): void
        + toText(): String
        + toString(): String
    }
}

class WorldGUI {
    - private final Simulation: simulation
    - private final SimulationConfigurator: config

    + public WorldGUI(SimulationConfigurator)
    + public void runSimulation(): void
    + public static void main: void
}

package model.presenters {

    class ConsoleMapDisplay {
        + mapChanged(worldMap: WorldMap, message: String): void
    }

    class MapVisualizer {
        - EMPTY_CELL: String
        - FRAME_SEGMENT: String
        - CELL_SEGMENT: String
        - map: WorldMap
        + MapVisualizer(map: WorldMap)
        + draw(lowerLeft: Vector2d, upperRight: Vector2d): String
        - drawFrame(innerSegment: boolean): String
        - drawHeader(lowerLeft: Vector2d, upperRight: Vector2d): String
        - drawObject(currentPosition: Vector2d): String
    }

    class SimulationPresenter {
        - worldMap: WorldMap
        - animalInfoLabel: Label
        - hideAnimalButton: Button
        - currentDayLabel: Label
        - moveInfoLabel: Label
        - startStopButton: Button
        - mapGrid: GridPane
        - showDominantGenotypeButton: Button
        - showPlantFieldsButton: Button
        - desktopPath: String
        - simulationCSV: SimulationCSV
        - selectedAnimal: Animal
        - statistics: Statistics
        - simulation: Simulation
        - simulationEngine: SimulationEngine
        - isSimulationRunning: boolean
        - cellSize: double
        - isCsv: boolean
        + setCsv(csv: boolean): void
        + getSimulation(): Simulation
        + setWorldMap(worldMap: WorldMap): void
        - clearGrid(): void
        - createLabelForElement(element: Object): Label
        - getColorByEnergy(energy: int, maxEnergy: int): String
        - drawGridCell(position: Vector2d, column: int, row: int): void
        - drawGrid(boundary: Boundary): void
        - drawXAxis(boundary: Boundary): void
        - drawYAxis(boundary: Boundary): void
        - drawAxes(boundary: Boundary): void
        + drawMap(): void
        + mapChanged(worldMap: WorldMap, message: String): void
        + stopSimulation(): void
        + onSimulationStartClicked(): void
        + onNotShowAnimalClicked(): void
        + showAnimalInfo(animal: Animal): void
        + onShowDominantGenotypeClicked(): void
        + onShowPlantFieldsClicked(): void
    }

    class StartPresenter {
        - startHeader: Label
        - saveToCsvChoiceBox: ChoiceBox<String>
        - dayLengthSlider: Slider
        - dayLengthValueLabel: Label
        - infoConfigurator: Label
        - loadConfigButton: Button
        - saveConfigButton: Button
        - startButton: Button
        - simulationPresenter: SimulationPresenter
        - daysCountSlider: Slider
        - contentArea: GridPane
        - daysCountValueLabel: Label
        - mapWidthSlider: Slider
        - mapWidthValueLabel: Label
        - mapHeightSlider: Slider
        - mapHeightValueLabel: Label
        - initialPlantCountSlider: Slider
        - initialPlantCountValueLabel: Label
        - numberOfPlantsGrowingPerDaySlider: Slider
        - numberOfPlantsGrowingPerDayValueLabel: Label
        - initialAnimalCountSlider: Slider
        - initialAnimalCountValueLabel: Label
        - initialAnimalEnergySlider: Slider
        - initialAnimalEnergyValueLabel: Label
        - readyToReproduceEnergySlider: Slider
        - readyToReproduceEnergyValueLabel: Label
        - reproduceEnergyLossSlider: Slider
        - reproduceEnergyLossValueLabel: Label
        - minimumMutationCountSlider: Slider
        - minimumMutationCountValueLabel: Label
        - maximumMutationCountSlider: Slider
        - maximumMutationCountValueLabel: Label
        - genomeLengthSlider: Slider
        - genomeLengthValueLabel: Label
        - mapTypeChoiceBox: ChoiceBox<String>
        - mutationVariantChoiceBox: ChoiceBox<String>
        + initialize()
        - isChoiceBoxValid(): boolean
        - showAlert(): void
        - stopSimulation(): void
        + onStartClicked(): void
        - configureSimulation(): void
        - updateUIWithConfig(): void
        + onLoadConfigClicked(): void
        + onSaveConfigClicked(): void
    }
}

WorldGUI -- SimulationConfigurator : uses
WorldGUI -- Simulation : uses

Simulation -- SimulationConfigurator : uses
Simulation -- WorldMap : uses
Simulation -- Statistics : uses

SimulationEngine -- Simulation : uses
SimulationEngine -- Thread : uses

SimulationPresenter -- WorldMap : uses
SimulationPresenter -- Simulation : uses

StartPresenter -- Simulation : uses
StartPresenter -- SimulationConfigurator : uses

ConsoleMapDisplay -- WorldMap : uses
MapVisualizer -- WorldMap : uses

RandomAnimalsGenerator -- WorldMap : uses
RandomAnimalsGenerator -- Animal : uses
RandomAnimalsGenerator -- Genotype : uses

RandomGensGenerator -- Genotype : uses

RandomPositionsGenerator -- WorldMap : uses
RandomPositionsGenerator -- Vector2d : uses

RandomPlantsGenerator -- WorldMap : uses
RandomPlantsGenerator -- Plant : uses

MapElement <|.. Boundary
Directions <-- Vector2d
MapObjects -- Plant : contains
MapObjects -- Animal : contains
Genotype -- Animal : contains
Animal -- Vector2d : contains
Animal -- Genotype : contains
Plant -- Vector2d : contains
Statistics -- WorldMap : uses
Tile -- MapObjects : contains
SimulationCSV -- Statistics : uses

WorldMap <|-- AbstractWorldMap
AbstractWorldMap -- SimulationConfigurator : uses
AbstractWorldMap -- Tile : contains
AbstractWorldMap -- Simulation : uses
AbstractWorldMap -- MapVisualizer : uses

WorldMap <|-- GlobeMap
WorldMap <|-- PoisonedMap
GlobeMap -- SimulationConfigurator : uses
PoisonedMap -- SimulationConfigurator : uses

MapChangeListener <|.. Simulation
MapChangeListener <|.. ConsoleMapDisplay
@enduml